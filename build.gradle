// swiped from BuildCraft

buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

repositories {
	mavenLocal()
	mavenCentral()

	maven {
		name = "AppleCore"
		url = "http://www.ryanliptak.com/maven/"
	}

	maven {
		name "ChickenBones"
		url "http://chickenbones.net/maven/"
	}

	maven {
		name "Mobius"
		url "http://mobiusstrip.eu/maven"
	}

	ivy {
		name "BuildCraft"
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
	}
}

apply plugin: 'forge'
apply plugin: 'checkstyle'

checkstyle {
	toolVersion = "6.11.2"
	configFile = new File(rootDir, "checkstyle/checkstyle.xml")
}

version = "${minecraft_version}-${growthcraft_extoak_version}"
group= "mod.grcextoak"
archivesBaseName = "growthcraft-extoak"

// 3rd party APIs
ext.thaumcraftApi = "api/thaumcraft/api"
ext.thaumcraftApiExclusionPattern = "**/thaumcraft/api/**"

ext.forestryApi = "api/ForestryAPI/api"
ext.forestryApiExclusionPattern = "**/forestry/api/**"

minecraft {
	version = minecraft_forge_version
	runDir = "run"
	replace '@VERSION@', project.version
	replace '@MC_VERSION@', version
}

// configure  the source folders
sourceSets {
	// this builds everything into the main package
	main {
		java {
			srcDir 'src/java'
		}
		resources {
			srcDir 'src/resources'
		}
	}
	api {
		java {
			srcDir project.forestryApi
			srcDir project.thaumcraftApi
		}
	}
}

processResources {
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
}

dependencies {
	compile project(":sub/Growthcraft")
}

runClient {
	if( project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
		args "--username=${project.mcUsername}"
		args "--password=${project.mcPassword}"
	}

}

debugClient {
	if( project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
		args "--username=${project.mcUsername}"
		args "--password=${project.mcPassword}"
	}
}

// --------------------
// extra jar section
// -------------------

tasks.withType(JavaCompile) {
	options.compilerArgs += ['-Xlint:all', '-Xlint:-rawtypes', '-Xlint:deprecation', '-Xlint:-unchecked']
	options.deprecation = true
	options.encoding = 'utf8'
}

// add a source jar
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	from(sourceSets.api.allSource) {
		exclude project.forestryApiExclusionPattern
		exclude project.thaumcraftApiExclusionPattern
	}
	classifier = 'sources'
}

javadoc {
	// add api classes to javadoc
	source += sourceSets.api.allSource
	// exclude 3rd party apis from the javadoc
	exclude project.forestryApiExclusionPattern
	exclude project.thaumcraftApiExclusionPattern

	failOnError = false
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
	from sourceSets.main.output
	from(sourceSets.api.output) {
		exclude project.forestryApiExclusionPattern
		exclude project.thaumcraftApiExclusionPattern
	}
	classifier = 'dev'
}

task apiJar(type: Jar) {
	from(sourceSets.api.output) {
		exclude project.forestryApiExclusionPattern
		exclude project.thaumcraftApiExclusionPattern
	}
	classifier = 'api'
}

jar {
	classifier = 'complete'
	// add api classes to main package
	from(sourceSets.api.output) {
		exclude project.forestryApiExclusionPattern
		exclude project.thaumcraftApiExclusionPattern
	}

	into('forestry/api') {
		// Only include the forestry LICENSE
		from project.forestryApi + "/LICENSE.md"
	}

	into('thaumcraft/api') {
		// Only include the thaumcraft LICENSE
		from project.thaumcraftApi + "/LICENSE"
	}
}

// make sure all of these happen when we run build
build.dependsOn sourceJar, javadocJar, deobfJar, apiJar
